<?php

/**
 * @file
 * An extensible Islandora viewer module
 */
/**
 * Change the islandora_video_admin form
 * islandora_video_streaming (module name) + 'form' + islandora_video_admin (form name) + 'alter'
 * @param array $form The Drupal form defintion, by reference
 * @param array $form_state The Drupal form state, by reference
 * @return void
**/
function islandora_video_streaming_form_islandora_video_admin_alter(array &$form, array &$form_state) {

  // Add an addtional handler for the reset
  $form['actions']['reset']['#submit'][] = 'islandora_video_streaming_islandora_video_admin_submit';

  // Add a new checkbox within an existing element on the form
  $form['viewers']['islandora_video_streaming_viewers'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use a streaming service'),
    '#description' => t('Override the default viewer with a streaming viewer, when a streaming-capable datastream exists'),
    '#default_value' => variable_get('islandora_video_streaming_viewers', false),
  );
  $viewers = islandora_video_streaming_get_available_viewers();
  $viewerList = '';
  foreach ($viewers as $k => $v) {
    $viewerList .= '<li>'.$v['label'].'</li>';
    $form['derivatives'][$k.'_make_derivative'] = array(
      '#type' => 'checkbox',
      '#title' => $v['derivative_description'],
      '#description' => '',
      '#default_value' => variable_get($k.'_make_derivative'),
    );
  }
  if (!$viewerList) {
    $viewerList = '<li>'.t('No streaming viewers are enabled').'</li>';
  }
  $form['viewers']['islandora_streaming_viewers_list'] = array(
    '#markup' => t('The following viewers will be utilized, in order.  (To change the order, alter the module weight for the viewer.)'.'<ul>'.$viewerList.'</ul>'),
  );
}

/**
 * Get a sorted list of available streaming viewers
 * @return array
*/
function islandora_video_streaming_get_available_viewers() {
  $viewers = module_invoke_all('islandora_viewer_info');
  foreach ($viewers as $k => $v) {
    if (strpos($k, 'islandora_video_streaming') !== 0) {
      unset($viewers[$k]);
    } else {
      $viewers[$k]['module_weight'] = db_query("SELECT weight FROM {system} WHERE name = :modname", array(':modname' => $k))->fetchObject()->weight;
    }
  }
  uasort(
    $viewers,
    function ($a, $b) {
      return $b['module_weight'] - $a['module_weight'];
    }
  );
  return $viewers;
}

/**
 * Handle submission of our parts of the islandora_video_admin form
 * We added this to the form submission handler
 * @param array $form The Drupal form defintion, by reference
 * @param array $form_state The Drupal form state, by reference
 * @return void
**/
function islandora_video_streaming_islandora_video_admin_submit($form, &$form_state) {
  // Here, we are just going to parallel the reset function of islandora_video_admin_submit()
  $op = $form_state['clicked_button']['#id'];
  switch ($op) {
    case 'edit-reset':
      variable_del('islandora_video_streaming_viewers');
      foreach (array_keys(islandora_video_streaming_get_available_viewers()) as $k) {
        variable_del($k.'_make_derivative');
      }
      break;
  }
}
