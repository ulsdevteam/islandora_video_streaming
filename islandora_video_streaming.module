<?php

/**
 * @file
 * An Islandora viewer module using Kaltura and Panopto
/**
 * Implements hook_islandora_viewer_info().
 */
function islandora_video_streaming_islandora_viewer_info() {
  return array(
    'islandora_video_streaming_kaltura' => array(
      'label' => t('Kaltura'),
      'description' => t('Use Kaltura and override the viewer'),
      'callback' => 'islandora_video_streaming_kaltura_callback',
      'mimetype' => array('application/javascript'),
      'configuration' => '',
    ),
      'islandora_video_streaming_panopto' => array(
      'label' => t('Panopto'),
      'description' => t('Use Panopto and override the viewer'),
      'callback' => 'islandora_video_streaming_panopto_callback',
      'mimetype' => array('application/javascript'),
      'configuration' => '',
    ),
  );
}

/**
 * Implements hook_menu().
 * Question: When do I need this?
 * This hook_menu gets called when menus are built.  This is specifically modifying the Islandora admin menu.
 * See for example: http://localhost:8000/admin/islandora/islandora_viewers
 * FIXME: this function doesn't exist islandora_video_streaming_admin
 * [x] FIXME: this file doesn't exist includes/admin.form.inc
 */
function islandora_video_streaming_menu() {
  return array(
    'admin/islandora/islandora_viewers/video_streaming' => array(
      'title' => 'Video Streaming',
      'description' => 'Configure the Video Streaming Viewers.',
      'page callback' => 'drupal_get_form',
      'access arguments' => array('administer site configuration'),
//      'page arguments' => array('islandora_video_streaming_admin'),
      'file' => 'includes/admin.form.inc',
      'type' => MENU_NORMAL_ITEM,
    ),
  );
}

/**
 * Implements hook_theme().
 * TODO: key islandora_video_streaming might need to change
 */
function islandora_video_streaming_theme($existing, $type, $theme, $path) {
  drupal_set_message("HOOK THEME");
    return array(
    'islandora_video_streaming' => array(
      'template' => 'theme/islandora-video-streaming',
      'variables' => array('object' => NULL, 'params' => NULL),
    ),
  );
}

/**
 * Implements template_preprocess_HOOK().
 */
function template_preprocess_islandora_video_streaming(array &$variables) {
  $params = $variables['params'];
  $variables['sources'] = array();
  if (isset($params['tn'])) {
    $variables['tn'] = $params['tn'];
  }
}

/**
 * Callback function to process audio player.
 *
 * @param array $params
 *   Array with configuration info for the audio player.
 */
function islandora_video_streaming_kaltura_callback($params = array()) {
  return theme('islandora_video_streaming', array('params' => $params));
}

/**
 * Implement Kaltura video upload  
 * @param AbstractObject $object 
 * @param String $filePath video file path
 */
function islandora_video_streaming_upload_to_Kaltura($object, $filePath) {
  $kcDir = libraries_get_Path('KalturaClient');
  require_once $kcDir.'/KalturaClient.php';
  
  $config = new KalturaConfiguration("2592481");
  $client = new KalturaClient($config);
  $ks = $client->session->start("1cde26bbb40938bedd8fff332fab1a51", "cas386@pitt.edu", KalturaSessionType::ADMIN, 2592481);
  $client->setKS($ks);
  
  // Create an Upload Token
  $uploadToken = new KalturaUploadToken();
    try {
    $result = $client->uploadToken->add($uploadToken);
  } catch (Exception $e) {
    drupal_set_message($e->getMessage());
  }
  
  // Send the Data
  if ($result) {
      $uploadTokenId = $result->id;
      drupal_set_message($uploadTokenId);
  }
  
  $resume = false;
  $finalChunk = true;
  $resumeAt = -1;
  
  try {
    $result = $client->uploadToken->upload($uploadTokenId, $filePath, $resume, $finalChunk, $resumeAt);
  } catch (Exception $e) {
      drupal_set_message($e->getMessage());
  }
  // Creating the Kaltura Media Entry
  $mediaEntry = new KalturaMediaEntry();
  $mediaEntry->name = $filePath;
  $mediaEntry->mediaType = KalturaMediaType::VIDEO;

  $entry = $client->media->add($mediaEntry);
  
  // Attach the Video
  $entryId = $entry->id;
  $resource = new KalturaUploadedFileTokenResource();
  $resource->token = $uploadTokenId;

  try {
    $result = $client->media->addContent($entryId, $resource);
    $streaming['entry_id'] = $result->id;
  } catch (Exception $e) {
    drupal_set_message($e->getMessage());
  }
  
  $version = -1;
  $result = $client->media->get($entryId, $version);
  
  try {
    $result = $client->media->get($entryId, $version);
  } catch (Exception $e) {
    echo $e->getMessage();
  }

  islandora_video_add_datastream($object, 'KALTURA_INFO', NULL, FALSE, json_encode($streaming));
}


/**
 * Change the islandora_video_admin form
 * islandora_video_streaming (module name) + 'form' + islandora_video_admin (form name) + 'alter'
 * @param array $form The Drupal form defintion, by reference
 * @param array $form_state The Drupal form state, by reference
 * @return void
**/
function islandora_video_streaming_form_islandora_video_admin_alter(array &$form, array &$form_state) {

  // Add an addtional hander for the reset
  $form['actions']['reset']['#submit'][] = 'islandora_video_streaming_islandora_video_admin_submit';

  // Add a new checkbox within an existing element on the form
  $form['viewers']['islandora_video_streaming_viewers'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use a streaming service'),
    '#description' => t('Override the default viewer with a streaming viewer, when a streaming-capable datastream exists'),
    '#default_value' => variable_get('islandora_video_streaming_viewers', false),
  );

  // Add a whole new section from a custom method in this module
  $streaming_table = islandora_video_streaming_settings_form();
  $form += $streaming_table;
}

/**
 * Handle submission of our parts of the islandora_video_admin form
 * We added this to the form submission handler
 * @param array $form The Drupal form defintion, by reference
 * @param array $form_state The Drupal form state, by reference
 * @return void
**/
function islandora_video_streaming_islandora_video_admin_submit($form, &$form_state) {
  // Here, we are just going to parallel the reset function of islandora_video_admin_submit()
  $op = $form_state['clicked_button']['#id'];
  switch ($op) {
    case 'edit-reset':
      variable_del('islandora_video_streaming_viewers');
      variable_del('islandora_video_streaming_settings');
      break;
  }
}