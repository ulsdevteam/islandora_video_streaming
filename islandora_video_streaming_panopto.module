<?php

/**
 * Implements hook_menu().
 */
function islandora_video_streaming_panopto_menu() {
  return array(
    'admin/islandora/islandora_viewers/video_streaming_panopto' => array(
      'title' => 'Panopto Video Streaming',
      'description' => 'Configure the Panopto Video Streaming Viewer',
      'page callback' => 'drupal_get_form',
      'access arguments' => array('administer site configuration'),
      'page arguments' => array('islandora_video_streaming_panopto_admin'),
      'file' => 'includes/panopto_admin.form.inc',
      'type' => MENU_NORMAL_ITEM,
    ),
  );
}
/**
 * Implements hook_islandora_viewer_info().
 */
function islandora_video_streaming_panopto_islandora_viewer_info() {
  return array(
    'islandora_video_streaming_panopto' => array(
      'label' => t('Panopto'),
      'description' => t('Use Panopto video streaming service'),
      'derivative_description' => t('Upload new content to Panopto video streaming service'),
      'mimetype' => array('application/javascript'),
      'configuration' => '',
    ),
  );
}

/**
 * Implements hook_islandora_CMODEL_PID_derivative()
 * 
**/
function islandora_video_streaming_panopto_islandora_sp_videoCModel_islandora_derivative() {
  $deriviatives = array();
  if (variable_get('islandora_video_streaming_panopto_make_derivative', false)) {
    $derivatives[] = array(
      'source_dsid' => 'OBJ',
      'destination_dsid' => 'PANOPTO_INFO',
      'weight' => '0',
      'function' => array(
        'islandora_video_streaming_panopto_upload',
      ),
      'file' => drupal_get_path('module', 'islandora_video_streaming') . '/includes/panopto_derivatives.inc',
    );
  }
  return $derivatives; 
}

/**
 * Change output for streaming capable videos, when appropriate
 * implements hook_process_islandora_video
 *
 * @var $variables array The page content variables
 */
function islandora_video_streaming_panopto_process_islandora_video(&$variables = array()) {
  $object = $variables['object'];
  $streamDatastream = 'PANOPTO_INFO';
  // If a streaming datastream is available, and if configured to stream
  if ($object[$streamDatastream] && variable_get('islandora_video_streaming_viewers')) {
    $panopto_object = json_decode($object[$streamDatastream]->content);
    $var = array(
        'url' => $panopto_object->upload_id,
        'height' => variable_get('islandora_video_streaming_panopto_video_height'),
        'width' => variable_get('islandora_video_streaming_panopto_video_width'),
        'aspect_ratio' => variable_get('islandora_video_streaming_panopto_video_aspect_ratio'),
        'start_at' => variable_get('islandora_video_streaming_panopto_video_start_at'),
        'interactivity' => variable_get('islandora_video_streaming_panopto_video_video_interactivity'),
        'autoplay' => variable_get('islandora_video_streaming_panopto_video_video_autoplay'),
        'showbrand' => variable_get('islandora_video_streaming_panopto_video_video_showbrand'),
        'showtitle' => variable_get('islandora_video_streaming_panopto_video_video_showtitle'),
        'offer_viewer' => variable_get('islandora_video_streaming_panopto_video_video_offer_viewer'),      
    );
    $new_content = theme('panopto_streaming_iframe', $var);
    // if the viewer was created successfully, overwrite the non-streaming viewer
    if (isset($new_content) && $new_content) {
      $variables['islandora_content'] = $new_content;
    } 
  }
}

/*
 * Implements hook_libraries_info().
 * @return array Library needed for upload
 */
function islandora_video_streaming_panopto_libraries_info() {
  $libraries['aws'] = array(
    'name' => 'aws library', 
    'vendor url' => 'https://aws.amazon.com/', 
    'download url' => 'https://docs.aws.amazon.com/aws-sdk-php/v3/download/aws.zip', 
    'version arguments' => array(
      'file' => 'README.md',
      'pattern' => '/Version (\d+)/', 
    ), 
    'files' => array(
      'php' => array('aws-autoloader.php'),
    ),
  );
  return $libraries;
}

/*
 * Implements hook_theme()
 * @return array Everything necessary for iframe.tpl.theme
 */
function islandora_video_streaming_panopto_theme() {
  return array(
    'panopto_streaming_iframe' => array(
      'variables' => array(
        'url' => null,
        'height' => null,
        'width' => null,
        'aspect_ratio' => null,
        'start_at' => null,
        'interactivity' => null,
        'autoplay' => null,
        'showbrand' => null,
        'showtitle' => null,
        'offer_viewer' => null,
      ),
      'template' => 'iframe',
      'path' => drupal_get_path('module','islandora_video_streaming') . DIRECTORY_SEPARATOR. 'theme',
    )
  );
} 

/*
 * Implements hook_islandora_object_alter().
 * @param AbstractObject $object The object being altered
 * @param array $context The context or action of which the object will be altered
 */
function islandora_video_streaming_panopto_islandora_object_alter(AbstractObject $object, &$context) {
  islandora_video_streaming_panopto_delete_from_panopto($object, $context);
} 

/*
 * Implements hook_islandora_datastream_alter().
 * @param AbstractObject $object The object being altered
 * @param AbstractDatastream $datastream The datastream being altered
 * @param array $context The context or action of which the object will be altered
 */
function islandora_video_streaming_panopto_islandora_datastream_alter(AbstractObject $object, AbstractDatastream $datastream, &$context) {
  if ($datastream->id == 'PANOPTO_INFO') {
    islandora_video_streaming_panopto_delete_from_panopto($object, $context);
  }
}

/*
 * Deletes video from Panopto server.
 * @param AbstractObject $object The object being altered
 * @param array $context The context or action of which the object will be altered
 */
function islandora_video_streaming_panopto_delete_from_panopto(AbstractObject $object, &$context) {
  if (isset($object['PANOPTO_INFO']) && ($context['action'] == 'purge' || $context['action'] == 'delete' )) {
   //Panopto/api/v1/sessions/{id} for deleting videos on Panopto
    $decoded = json_decode($object['PANOPTO_INFO']->content);
    if (isset($decoded)) {
      $id = $decoded->upload_id;
      if (isset($id)) {
        $host = variable_get('islandora_video_streaming_panopto_host');
        $oauthendpoint = $host . '/Panopto/oauth2/connect/token/';
        $uploadendpoint = $host . '/Panopto/api/v1/sessions/'. $id;
        $token = islandora_video_streaming_panopto_get_token($oauthendpoint);
        if (isset($token)) {
          $headers = array("Authorization: Bearer {$token}", "Content-Type: application/json");
          $response = islandora_video_streaming_panopto_request_curl($uploadendpoint, $headers, '', 'DELETE');
        }
      }
    }
  }
}

/**
 * Requests token and returns token
 * @param string $oauthendpoint The authentication URL for request
 * @return string|null A token retrieved from server, or null on failure
 */
function islandora_video_streaming_panopto_get_token($oauthendpoint) {
  $client_id = variable_get('islandora_video_streaming_panopto_client_id');
  $secret_client_id = variable_get('islandora_video_streaming_panopto_secret_client_id');
  $username = variable_get('islandora_video_streaming_panopto_username');
  $password = variable_get('islandora_video_streaming_panopto_password');
  
  $response = null;
  $token = null;
  
  if (isset($oauthendpoint) && isset($client_id) && isset($secret_client_id) && isset($username) && isset($password)) {
    $authorization = base64_encode("$client_id:$secret_client_id");
    $headers = array("Authorization: Basic {$authorization}", "Content-Type: application/x-www-form-urlencoded");
    $content = 'grant_type=password&username='.urlencode(strtolower($username)).'&password='.urlencode($password).'&scope=api';
    $response = islandora_video_streaming_panopto_request_curl($oauthendpoint, $headers, $content, 'POST', array(200 => 'access_token'));
  }
  if ($response) {
    $token = $response['access_token'];
  } else {
    $messages = array(
      'message' => t('Failed to retrieve $token. $response is @response.'),
      'message_sub' => array(
        '@response' => $response,
      ),
      'type' => 'islandora_video_streaming_panopto',
      'severity' => WATCHDOG_ERROR,
    );
    $failureMessage['messages'][] = $messages;
  }
  return $token;
}

/**
 * Function to send a CURL request
 * @param string $endpoint The URL which is the target of the request
 * @param array $headers A list of HTTP headers to send
 * @param string $content The optional body of the request, if applicable
 * @param string $type The HTTP method to use (defaults to GET)
 * @param array $expect An optional keyed array of HTTP response codes mapped to an (optional) expected JSON identifier
 *                      If provided, this is required for the function to return data
 * @return mixed A string or array.
 *               If no $expect parameter is given, returns the response body.
 *               If an $expect key matches with no array value, returns the response body only on a match
 *               If an $expect key matches and has a value, returns the decoded JSON as an array if that matched value is present as a key
 */
function islandora_video_streaming_panopto_request_curl($endpoint, $headers, $content = '', $type = 'GET', $expect = array()) {
  $cURL = curl_init();
  curl_setopt($cURL, CURLOPT_URL, $endpoint);
  curl_setopt($cURL, CURLOPT_RETURNTRANSFER, true);
  curl_setopt($cURL, CURLOPT_HEADER, 1);
  curl_setopt($cURL, CURLINFO_HEADER_OUT, true);
  switch (strtoupper($type)) {
    case 'POST':
      curl_setopt($cURL, CURLOPT_POST, true);
    break;
    case 'PUT':
      curl_setopt($cURL, CURLOPT_CUSTOMREQUEST, 'PUT');
    break;
    case 'DELETE':
      curl_setopt($cURL, CURLOPT_CUSTOMREQUEST, 'DELETE');
    break;
  }
  if ($content) {
    curl_setopt($cURL, CURLOPT_POSTFIELDS, $content);
  }
  curl_setopt($cURL, CURLOPT_HTTPHEADER, $headers);
  $response = curl_exec($cURL);
  $header_size = curl_getinfo($cURL, CURLINFO_HEADER_SIZE);
  $response_code = curl_getinfo($cURL, CURLINFO_RESPONSE_CODE);
  $headerSent = curl_getinfo($cURL, CURLINFO_HEADER_OUT );
  curl_close($cURL);
  if ($response === false) {
    $messages = array(
      'message' => t("Unable to receive response from curl_exec(): @error "),
      'message_sub' => array('@error' => curl_error($cURL)),
      'type' => 'islandora_video_streaming_panopto',
      'severity' => WATCHDOG_ERROR,
    );
  } else {
    $headers = substr($response, 0, $header_size);
    $body = substr($response, $header_size);
    if (empty($expect) || (isset($expect[$response_code]) && empty($expect[$response_code]))) {
      return $body;
    } else if (isset($expect[$response_code])) {
      $expectation = $expect[$response_code];
      $json = json_decode($body, true);
      if (is_array($json)) {
        if (isset($json[$expectation])) {
          return $json;
        } else {
          $messages = array(
            'message' => t("JSON key from @endpoint (@expectation) missing . @response"),
            'message_sub' => array(
              '@endpoint' => $endpoint, 
              '@expectation' => $expectation,
              '@response' => $response,
            ),
            'type' => 'islandora_video_streaming_panopto',
            'severity' => WATCHDOG_ERROR,
          );
        }
      } else {
        $messages = array(
          'message' => t("Expected JSON key from @endpoint but could not decode. @response"),
          'message_sub' => array(
            '@endpoint' => $endpoint,
            '@response' => $response,
          ),
          'type' => 'islandora_video_streaming_panopto',
          'severity' => WATCHDOG_ERROR,
        );
      }
    } else {
      $messages = array(
        'message' => t("Expected one of @expected; got a @response_code"),
        'message_sub' => array(
          '@expected' => implode(',', array_keys($expect)),
          '@response_code' => $response_code,
        ), 
        'type' => 'islandora_video_streaming_panopto',
        'severity' => WATCHDOG_ERROR,
      );
    }
  }
  watchdog($messages['type'], $messages['message'], $messages['message_sub'], $messages['severity']);
  return;
}

